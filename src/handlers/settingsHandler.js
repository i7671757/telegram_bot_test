import logger from '../utils/logger.js';
import { setCommandsMenu } from '../utils/commands.js';
import { showMainMenu } from './cityHandlers.js';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const settingsHandler = (bot) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  bot.command('settings', handleSettings);
  bot.hears(/üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏|Settings|Sozlamalar/, handleSettings);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞
  bot.hears(/üåê –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫|Change language|Tilni o'zgartirish/, async (ctx) => {
    try {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤—ã–±—Ä–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É —è–∑—ã–∫–∞`);
      
      ctx.updateSession({
        lastAction: 'settings_language',
        lastActionTime: new Date().toISOString()
      });
      
      await ctx.reply(ctx.i18n.t('language.select'), {
        reply_markup: {
          keyboard: [
            [
              { text: ctx.i18n.t('menuLanguage.ru') },
              { text: ctx.i18n.t('menuLanguage.uz') },
              { text: ctx.i18n.t('menuLanguage.en') }
            ],
            [{ text: ctx.i18n.t('menu.back') }]
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
      await ctx.reply(ctx.i18n.t('navigation.back_error'));
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä–æ–¥–∞
  bot.hears(/üèôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥|Change city|Shaharni o'zgartirish/, async (ctx) => {
    try {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤—ã–±—Ä–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≥–æ—Ä–æ–¥–∞`);
      
      ctx.updateSession({
        lastAction: 'settings_city',
        lastActionTime: new Date().toISOString()
      });
      
      await ctx.reply(ctx.i18n.t('select_city'), {
        parse_mode: 'HTML',
        reply_markup: {
          keyboard: [
            [
              { text: ctx.i18n.t('city.tashkent') },
              { text: ctx.i18n.t('city.samarkand') },
              { text: ctx.i18n.t('city.bukhara') }
            ],
            [{ text: ctx.i18n.t('menu.back') }]
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
      await ctx.reply(ctx.i18n.t('navigation.back_error'));
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª–∏–∞–ª–∞
  bot.hears(/üè¢ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª–∏–∞–ª|Change branch|Fillialni o'zgartirish/, async (ctx) => {
    try {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤—ã–±—Ä–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ñ–∏–ª–∏–∞–ª–∞`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –≥–æ—Ä–æ–¥
      if (!ctx.session.selectedCity) {
        logger.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª–∏–∞–ª –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞`);
        await ctx.reply(ctx.i18n.t('settings.need_city_first'), {
          reply_markup: {
            keyboard: [
              [{ text: ctx.i18n.t('settings.change_city') }],
              [{ text: ctx.i18n.t('menu.back') }]
            ],
            resize_keyboard: true
          }
        });
        return;
      }
      
      const city = ctx.session.selectedCity;
      
      ctx.updateSession({
        lastAction: 'settings_branch',
        lastActionTime: new Date().toISOString()
      });
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–∞
      const branches = {
        tashkent: ['Tashkent Branch 1', 'Tashkent Branch 2', 'Tashkent Branch 3'],
        samarkand: ['Samarkand Branch 1', 'Samarkand Branch 2'],
        bukhara: ['Bukhara Branch 1', 'Bukhara Branch 2']
      };
      
      const branchButtons = branches[city].map(branch => ({
        text: branch
      }));
      
      const branchRows = [];
      for (let i = 0; i < branchButtons.length; i += 2) {
        const row = [branchButtons[i]];
        if (i + 1 < branchButtons.length) {
          row.push(branchButtons[i + 1]);
        }
        branchRows.push(row);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
      branchRows.push([{ text: ctx.i18n.t('menu.back') }]);
      
      await ctx.reply(ctx.i18n.t('select_branch'), {
        parse_mode: 'HTML',
        reply_markup: {
          keyboard: branchRows,
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
      await ctx.reply(ctx.i18n.t('navigation.back_error'));
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  bot.hears(/üìã –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏|My settings|Mening sozlamalarim/, async (ctx) => {
    try {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏`);
      
      if (!ctx.i18n || !ctx.i18n.t) {
        logger.warn('i18n middleware not properly initialized');
        return;
      }
      
      const settings = {
        language: ctx.i18n.t(`language.current`),
        city: ctx.session.selectedCity ? ctx.i18n.t(`city.${ctx.session.selectedCity}`) : ctx.i18n.t('settings.not_selected'),
        branch: ctx.session.selectedBranch || ctx.i18n.t('settings.not_selected')
      };
      
      await ctx.reply(ctx.i18n.t('settings.current', { 
        language: settings.language,
        city: settings.city,
        branch: settings.branch
      }), {
        parse_mode: 'HTML',
        reply_markup: {
          keyboard: getSettingsKeyboard(ctx),
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
      await ctx.reply(ctx.i18n.t('navigation.back_error'));
    }
  });
};

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function handleSettings(ctx) {
  try {
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –æ—Ç–∫—Ä—ã–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏`);
    
    ctx.updateSession({
      lastAction: 'open_settings',
      lastActionTime: new Date().toISOString()
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    await setCommandsMenu(ctx);
    
    await ctx.reply(ctx.i18n.t('settings.title'), {
      reply_markup: {
        keyboard: getSettingsKeyboard(ctx),
        resize_keyboard: true
      }
    });
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
    await ctx.reply(ctx.i18n.t('navigation.back_error'));
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
function getSettingsKeyboard(ctx) {
  return [
    [
      { text: ctx.i18n.t('settings.change_language') },
      { text: ctx.i18n.t('settings.change_city') }
    ],
    [
      { text: ctx.i18n.t('settings.change_branch') },
      { text: ctx.i18n.t('settings.my_settings') }
    ],
    [
      // { text: ctx.i18n.t('menu.main') },
      { text: ctx.i18n.t('menu.back') }
    ]
  ];
}

export default settingsHandler; 