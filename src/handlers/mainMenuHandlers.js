import logger from '../utils/logger.js';
import { setCommandsMenu } from '../utils/commands.js';
import { showMainMenu } from './cityHandlers.js';
import axios from 'axios';
import { handleBranchSelection, handleBranchCallback, handleProceedToOrder } from '../commands/branches.js';
const {match} =require("telegraf-i18n") 

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
const mainMenuHandlers = (bot) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"
  bot.hears(match("main_menu.order"), async (ctx) => {
    try {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤—ã–±—Ä–∞–ª "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"`);
      
      ctx.updateSession({
        lastAction: 'order_start',
        lastActionTime: new Date().toISOString()
      });
      
      await ctx.reply(ctx.i18n.t('order.start_message'), {
        parse_mode: 'HTML',
        reply_markup: {
          keyboard: [
            [
              { text: ctx.i18n.t('order.self_pickup') },
              { text: ctx.i18n.t('order.delivery') }
            ],
            [{ text: ctx.i18n.t('menu.back') }]
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
      throw error;
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤"
  bot.hears(match("main_menu.order_history"), async (ctx) => {
    try {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤—ã–±—Ä–∞–ª "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤"`);
      
      ctx.updateSession({
        lastAction: 'order_history',
        lastActionTime: new Date().toISOString()
      });
      
      await ctx.reply(ctx.i18n.t('order.history_empty'), {
        parse_mode: 'HTML',
        reply_markup: {
          keyboard: [
            [{ text: ctx.i18n.t('menu.back') }]
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
      throw error;
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê–∫—Ü–∏–∏"
  bot.hears(match("main_menu.aksiya"), async (ctx) => {
    try {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤—ã–±—Ä–∞–ª "–ê–∫—Ü–∏–∏"`);
      
      ctx.updateSession({
        lastAction: 'aksiya',
        lastActionTime: new Date().toISOString()
      });
      
      await ctx.reply(ctx.i18n.t('aksiya.no_active'), {
        parse_mode: 'HTML',
        reply_markup: {
          keyboard: [
            [{ text: ctx.i18n.t('menu.back') }]
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ "–ê–∫—Ü–∏–∏" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
      throw error;
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ"
  bot.hears(match("main_menu.join_team"), async (ctx) => {
    try {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤—ã–±—Ä–∞–ª "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ"`);
      
      ctx.updateSession({
        lastAction: 'join_team',
        lastActionTime: new Date().toISOString()
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å inline –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±–æ—Ç—É
      await ctx.reply(ctx.i18n.t('join_team.info'), {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ü–µ—Ä–µ–π—Ç–∏', url: 'http://t.me/HavoqandJamoa_Bot' }]
          ]
        }
      });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
      await ctx.reply(ctx.i18n.t('main_menu.title'), {
        parse_mode: 'HTML',
        reply_markup: {
          keyboard: [
            [{ text: ctx.i18n.t('main_menu.order') } ],
            [{ text: ctx.i18n.t('main_menu.order_history') }],
            [{ text: ctx.i18n.t('settings.settings') },{ text: ctx.i18n.t('main_menu.aksiya') }],
            [{ text: ctx.i18n.t('main_menu.join_team') }, { text: ctx.i18n.t('main_menu.contact') }]
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
      throw error;
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–≤—è–∑–∞—Ç—å—Å—è —Å Les Ailes"
  bot.hears(match("main_menu.contact"), async (ctx) => {
    try {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤—ã–±—Ä–∞–ª "–°–≤—è–∑–∞—Ç—å—Å—è —Å Les Ailes"`);
      
      ctx.updateSession({
        lastAction: 'contact',
        lastActionTime: new Date().toISOString()
      });
      
      await ctx.reply(ctx.i18n.t('contact.info'), {
        parse_mode: 'HTML',
        reply_markup: {
          keyboard: [
            [{ text: ctx.i18n.t('contact.write_review') }, { text: ctx.i18n.t('contact.write_complaint') }],
            [{ text: ctx.i18n.t('menu.back') }]
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ "–°–≤—è–∑–∞—Ç—å—Å—è" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
      throw error;
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–∞–º–æ–≤—ã–≤–æ–∑–∞
  bot.hears(match("order.self_pickup"), async (ctx) => {
    try {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤—ã–±—Ä–∞–ª "–°–∞–º–æ–≤—ã–≤–æ–∑"`);
      
      ctx.updateSession({
        lastAction: 'self_pickup',
        lastActionTime: new Date().toISOString()
      });
      
      await ctx.reply(ctx.i18n.t('self_pickup.select_option'), {
        parse_mode: 'HTML',
        reply_markup: {
          keyboard: [
            [{ text: ctx.i18n.t('self_pickup.send_location'), request_location: true }, { text: ctx.i18n.t('self_pickup.order_here') }],
            [{ text: ctx.i18n.t('self_pickup.select_branch') }, { text: ctx.i18n.t('menu.back') }]
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
      throw error;
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å —Ñ–∏–ª–∏–∞–ª" –≤ –º–µ–Ω—é —Å–∞–º–æ–≤—ã–≤–æ–∑–∞
  bot.hears(match("self_pickup.select_branch"), async (ctx) => {
    try {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤—ã–±—Ä–∞–ª "–í—ã–±—Ä–∞—Ç—å —Ñ–∏–ª–∏–∞–ª" –≤ –º–µ–Ω—é —Å–∞–º–æ–≤—ã–≤–æ–∑–∞`);
      
      ctx.updateSession({
        lastAction: 'select_branch_pickup',
        lastActionTime: new Date().toISOString()
      });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ branches.js –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤
      await handleBranchSelection(ctx);
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
      throw error;
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ (callback)
  bot.action(/select_branch_\d+/, handleBranchCallback);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑" –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞
  bot.action('proceed_to_order', handleProceedToOrder);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å —Ñ–∏–ª–∏–∞–ª" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
  bot.hears(match("main_menu.select_branch"), async (ctx) => {
    try {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤—ã–±—Ä–∞–ª "–í—ã–±—Ä–∞—Ç—å —Ñ–∏–ª–∏–∞–ª" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é`);
      
      ctx.updateSession({
        lastAction: 'select_branch',
        lastActionTime: new Date().toISOString()
      });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ branches.js –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤
      await handleBranchSelection(ctx);
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª–∏–∞–ª–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
      throw error;
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–ª–∏–∂–∞–π—à–∏–π —Ñ–∏–ª–∏–∞–ª"
  bot.hears(match("main_menu.find_nearest_branch"), async (ctx) => {
    try {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞`);
      
      ctx.updateSession({
        lastAction: 'find_nearest_branch',
        lastActionTime: new Date().toISOString()
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞—Ü–∏–∏
      await ctx.reply(ctx.i18n.t('self_pickup.location_request'), {
        reply_markup: {
          keyboard: [
            [{ text: 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –ª–æ–∫–∞—Ü–∏—é', request_location: true }],
            [{ text: ctx.i18n.t('menu.back') }]
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
      throw error;
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.on('location', async (ctx) => {
    try {
      const location = ctx.message.location;
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–æ–∫–∞—Ü–∏—é: ${JSON.stringify(location)}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ OpenStreetMap Nominatim API
      const url = new URL('https://nominatim.openstreetmap.org/reverse');
      url.searchParams.append('format', 'json');
      url.searchParams.append('lat', location.latitude);
      url.searchParams.append('lon', location.longitude);
      url.searchParams.append('zoom', '18');
      url.searchParams.append('addressdetails', '1');
      
      logger.info(`–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Nominatim API: ${url.toString()}`);
      
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`Nominatim API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status} ${response.statusText}`);
      }
      
      const data = await response.json();
      logger.info(`–û—Ç–≤–µ—Ç –æ—Ç Nominatim API: ${JSON.stringify(data)}`);
      
      let address = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å';
      if (data && data.display_name) {
        address = data.display_name;
      }
      
      await ctx.reply(`–í–∞—à –∞–¥—Ä–µ—Å: ${address}\n\n–ú—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–π–¥–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Ñ–∏–ª–∏–∞–ª.`, {
        reply_markup: {
          keyboard: [
            [{ text: ctx.i18n.t('self_pickup.back') }, {text: ctx.i18n.t('self_pickup.confirm')}],
            [{ text: ctx.i18n.t('self_pickup.send_location'), request_location: true }]
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}: ${error.message}`, error);
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±.', {
        reply_markup: {
          keyboard: [
            [{ text: ctx.i18n.t('self_pickup.send_location'), request_location: true }, { text: ctx.i18n.t('self_pickup.order_here') }],
            [{ text: ctx.i18n.t('self_pickup.select_branch') }, { text: ctx.i18n.t('menu.back') }]
          ],
          resize_keyboard: true
        }
      });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
  bot.hears(match('self_pickup.confirm'), async (ctx) => {
    try {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"`);
      
      ctx.updateSession({
        lastAction: 'show_menu_categories',
        lastActionTime: new Date().toISOString()
      });

      await ctx.reply(ctx.i18n.t('menu_categories.title'), {
        parse_mode: 'HTML',
        reply_markup: {
          keyboard: [
            [{ text: ctx.i18n.t('menu_categories.sets') }],
            [{ text: ctx.i18n.t('menu_categories.snacks') }],
            [{ text: ctx.i18n.t('menu_categories.burgers') }],
            [{ text: ctx.i18n.t('menu_categories.chicken') }],
            [
              { text: ctx.i18n.t('menu_categories.back') },
              { text: ctx.i18n.t('menu_categories.basket') }
            ]
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
      throw error;
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑–∞—Ç—å —Ç—É—Ç"
  bot.hears(match("self_pickup.order_here"), async (ctx) => {
    try {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤—ã–±—Ä–∞–ª "–ó–∞–∫–∞–∑–∞—Ç—å —Ç—É—Ç"`);
      
      ctx.updateSession({
        lastAction: 'order_here',
        lastActionTime: new Date().toISOString()
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–∞–π—Ç
      await ctx.reply(ctx.i18n.t('self_pickup.order_website'), {
        parse_mode: 'HTML',
        disable_web_page_preview: false,
        reply_markup: {
          inline_keyboard: [
            [{ text: ctx.i18n.t('self_pickup.goTo'), url: 'https://lesailes.uz/' }]
          ]
        }
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ "–ó–∞–∫–∞–∑–∞—Ç—å —Ç—É—Ç" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
      throw error;
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ —Å–ø–∏—Å–∫–µ —Ñ–∏–ª–∏–∞–ª–æ–≤
  bot.action('back_to_menu', async (ctx) => {
    try {
      await ctx.deleteMessage();
      await showMainMenu(ctx);
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ${error.message}`);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª–∏–∞–ª–∞–º"
  bot.action('show_branches', async (ctx) => {
    try {
      await handleBranchSelection(ctx);
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É —Ñ–∏–ª–∏–∞–ª–æ–≤: ${error.message}`);
    }
  });
};

export default mainMenuHandlers;