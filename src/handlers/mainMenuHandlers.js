import logger from '../utils/logger.js';
import { setCommandsMenu } from '../utils/commands.js';
import { showMainMenu } from './cityHandlers.js';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
const mainMenuHandlers = (bot) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"
  bot.hears(/üéÅ .+berish|üéÅ .+order|üéÅ .+–∑–∞–∫–∞–∑/i, async (ctx) => {
    try {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤—ã–±—Ä–∞–ª "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"`);
      
      ctx.updateSession({
        lastAction: 'order_start',
        lastActionTime: new Date().toISOString()
      });
      
      await ctx.reply(ctx.i18n.t('order.start_message'), {
        parse_mode: 'HTML',
        reply_markup: {
          keyboard: [
            [
              { text: ctx.i18n.t('order.self_pickup') },
              { text: ctx.i18n.t('order.delivery') }
            ],
            [{ text: ctx.i18n.t('menu.back') }]
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
      throw error;
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤"
  bot.hears(/üìã .+tarixi|üìã .+history|üìã .+–∏—Å—Ç–æ—Ä/i, async (ctx) => {
    try {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤—ã–±—Ä–∞–ª "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤"`);
      
      ctx.updateSession({
        lastAction: 'order_history',
        lastActionTime: new Date().toISOString()
      });
      
      await ctx.reply(ctx.i18n.t('order.history_empty'), {
        parse_mode: 'HTML',
        reply_markup: {
          keyboard: [
            [{ text: ctx.i18n.t('menu.back') }]
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
      throw error;
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê–∫—Ü–∏–∏"
  bot.hears(/üî• Aksiya|üî• Promotions|üî• –ê–∫—Ü–∏–∏/i, async (ctx) => {
    try {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤—ã–±—Ä–∞–ª "–ê–∫—Ü–∏–∏"`);
      
      ctx.updateSession({
        lastAction: 'aksiya',
        lastActionTime: new Date().toISOString()
      });
      
      await ctx.reply(ctx.i18n.t('aksiya.no_active'), {
        parse_mode: 'HTML',
        reply_markup: {
          keyboard: [
            [{ text: ctx.i18n.t('menu.back') }]
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ "–ê–∫—Ü–∏–∏" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
      throw error;
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ"
  bot.hears(/üë§ .+qo['']shiling|üë§ .+team|üë§ .+–∫–æ–º–∞–Ω–¥/i, async (ctx) => {
    try {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤—ã–±—Ä–∞–ª "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ"`);
      
      ctx.updateSession({
        lastAction: 'join_team',
        lastActionTime: new Date().toISOString()
      });
      
      await ctx.reply(ctx.i18n.t('join_team.info'), {
        parse_mode: 'HTML',
        reply_markup: {
          keyboard: [
            [{ text: ctx.i18n.t('menu.back') }]
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
      throw error;
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–≤—è–∑–∞—Ç—å—Å—è —Å Les Ailes"
  bot.hears(/üçó .+aloqa|üçó .+contact|üçó .+—Å–≤—è–∑/i, async (ctx) => {
    try {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤—ã–±—Ä–∞–ª "–°–≤—è–∑–∞—Ç—å—Å—è —Å Les Ailes"`);
      
      ctx.updateSession({
        lastAction: 'contact',
        lastActionTime: new Date().toISOString()
      });
      
      await ctx.reply(ctx.i18n.t('contact.info'), {
        parse_mode: 'HTML',
        reply_markup: {
          keyboard: [
            [{ text: ctx.i18n.t('menu.back') }]
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ "–°–≤—è–∑–∞—Ç—å—Å—è" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
      throw error;
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–∞–º–æ–≤—ã–≤–æ–∑–∞
  bot.hears(/.*—Å–∞–º–æ–≤—ã–≤–æ–∑.*|.*self.?pickup.*|.*olib ketish.*/i, async (ctx) => {
    try {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤—ã–±—Ä–∞–ª "–°–∞–º–æ–≤—ã–≤–æ–∑"`);
      
      ctx.updateSession({
        lastAction: 'self_pickup',
        lastActionTime: new Date().toISOString()
      });
      
      await ctx.reply(ctx.i18n.t('self_pickup.select_option'), {
        parse_mode: 'HTML',
        reply_markup: {
          keyboard: [
            [{ text: ctx.i18n.t('self_pickup.find_nearest') }, { text: ctx.i18n.t('self_pickup.order_here') }],
            [{ text: ctx.i18n.t('self_pickup.select_branch') },   { text: ctx.i18n.t('menu.back') } ],
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
      throw error;
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–ª–∏–∂–∞–π—à–∏–π —Ñ–∏–ª–∏–∞–ª"
  bot.hears(/üìç.*–±–ª–∏–∂–∞–π—à–∏–π.*|üìç.*nearest.*|üìç.*yaqin.*/i, async (ctx) => {
    try {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞`);
      
      ctx.updateSession({
        lastAction: 'find_nearest_branch',
        lastActionTime: new Date().toISOString()
      });

      await ctx.reply(ctx.i18n.t('self_pickup.location_request'), {
        reply_markup: {
          keyboard: [
            [{ text: ctx.i18n.t('menu.back'), request_location: true }],
            [{ text: ctx.i18n.t('menu.back') }]
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
      throw error;
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑–∞—Ç—å —Ç—É—Ç"
  bot.hears(/üåê.*–∑–∞–∫–∞–∑–∞—Ç—å —Ç—É—Ç.*|üåê.*order here.*|üåê.*buyurtma.*/i, async (ctx) => {
    try {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤—ã–±—Ä–∞–ª "–ó–∞–∫–∞–∑–∞—Ç—å —Ç—É—Ç"`);
      
      ctx.updateSession({
        lastAction: 'order_here',
        lastActionTime: new Date().toISOString()
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–∞–π—Ç
      await ctx.reply(ctx.i18n.t('self_pickup.order_website'), {
        parse_mode: 'HTML',
        disable_web_page_preview: false,
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ü–µ—Ä–µ–π—Ç–∏', url: 'https://lesailes.uz/' }]
          ]
        }
      });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
      await ctx.reply(ctx.i18n.t('navigation.back_option'), {
        reply_markup: {
          keyboard: [
            [{ text: ctx.i18n.t('menu.back') }]
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ "–ó–∞–∫–∞–∑–∞—Ç—å —Ç—É—Ç" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
      throw error;
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å —Ñ–∏–ª–∏–∞–ª"
  bot.hears(/–≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª–∏–∞–ª|select branch|filial tanlash/i, async (ctx) => {
    try {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤—ã–±—Ä–∞–ª "–í—ã–±—Ä–∞—Ç—å —Ñ–∏–ª–∏–∞–ª"`);
      
      ctx.updateSession({
        lastAction: 'select_branch',
        lastActionTime: new Date().toISOString()
      });

      await ctx.reply(ctx.i18n.t('select_city'), {
        parse_mode: 'HTML',
        reply_markup: {
          keyboard: [
            [{ text: ctx.i18n.t('city.tashkent') }],
            [{ text: ctx.i18n.t('city.samarkand') }],
            [{ text: ctx.i18n.t('city.bukhara') }],
            [{ text: ctx.i18n.t('menu.back') }]
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
      throw error;
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ñ–∏–ª–∏–∞–ª–æ–≤
  bot.hears(/–¢–∞—à–∫–µ–Ω—Ç|Tashkent|Toshkent|–°–∞–º–∞—Ä–∫–∞–Ω–¥|Samarkand|Samarqand|–ë—É—Ö–∞—Ä–∞|Bukhara|Buxoro/i, async (ctx) => {
    try {
      const cityText = ctx.message.text;
      let cityKey;
      
      if (/–¢–∞—à–∫–µ–Ω—Ç|Tashkent|Toshkent/i.test(cityText)) {
        cityKey = 'tashkent';
      } else if (/–°–∞–º–∞—Ä–∫–∞–Ω–¥|Samarkand|Samarqand/i.test(cityText)) {
        cityKey = 'samarkand';
      } else if (/–ë—É—Ö–∞—Ä–∞|Bukhara|Buxoro/i.test(cityText)) {
        cityKey = 'bukhara';
      }

      if (!cityKey) return;

      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥ ${cityText}`);
      
      ctx.updateSession({
        selectedCity: cityKey,
        lastAction: 'city_selected',
        lastActionTime: new Date().toISOString()
      });

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
      const branchButtons = Object.values(ctx.i18n.t(`branches.${cityKey}.list`)).map(branch => [{ text: branch }]);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
      branchButtons.push([{ text: ctx.i18n.t('menu.back') }]);

      await ctx.reply(ctx.i18n.t(`branches.${cityKey}.title`), {
        parse_mode: 'HTML',
        reply_markup: {
          keyboard: branchButtons,
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
      throw error;
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
  bot.hears(/üè™.*/i, async (ctx) => {
    try {
      const branchName = ctx.message.text;
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤—ã–±—Ä–∞–ª —Ñ–∏–ª–∏–∞–ª ${branchName}`);
      
      ctx.updateSession({
        selectedBranch: branchName,
        lastAction: 'branch_selected',
        lastActionTime: new Date().toISOString()
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞
      await ctx.reply(ctx.i18n.t('branch_selected', {
        city: ctx.i18n.t(`city.${ctx.session.selectedCity}`),
        branch: branchName
      }), {
        parse_mode: 'HTML',
        reply_markup: {
          keyboard: [
            [{ text: ctx.i18n.t('menu.back') }]
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, error);
      throw error;
    }
  });
};

export default mainMenuHandlers; 