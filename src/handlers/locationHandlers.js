import { Markup } from 'telegraf';
import i18n from '../config/i18n.js';
import logger from '../utils/logger.js';

export const locationHandlers = (bot) => {
  // Handle "–°–∞–º–æ–≤—ã–≤–æ–∑" button
  bot.hears('üö∂ –°–∞–º–æ–≤—ã–≤–æ–∑', async (ctx) => {
    try {
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ª–æ–∫–∞—Ü–∏—é –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
      ctx.session.pendingLocation = null;
      
      await ctx.reply('–ì–¥–µ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å üëÄ? –ï—Å–ª–∏ –í—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é üìç, –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º –±–ª–∏–∂–∞–π—à–∏–π –∫ –í–∞–º —Ñ–∏–ª–∏–∞–ª', 
        Markup.keyboard([
          [{ text: 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', request_location: true }],
          ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
        ]).resize()
      );
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤—ã–±—Ä–∞–ª —Å–∞–º–æ–≤—ã–≤–æ–∑`);
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}:`, error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // Handle location sharing
  bot.on('location', async (ctx) => {
    try {
      const { latitude, longitude } = ctx.message.location;
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!ctx.session) {
        ctx.session = {};
      }
      
      // Store location in session
      ctx.session.pendingLocation = { latitude, longitude };

      // First send the location back
      await ctx.replyWithLocation(latitude, longitude);
      
      // Then send the address and confirmation message with confirmation buttons
      await ctx.reply(
        '–í–∞—à –∞–¥—Ä–µ—Å: Sharof Rashidov ko\'chasi, Qashg\'ar (C-4) dahasi, Yunusobod Tumani, Toshkent, 100000, O\'zbekiston\n\n' +
        '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –∑–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é üìç',
        Markup.keyboard([
          ['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'],
          [{ text: 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', request_location: true }],
          ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
        ]).resize()
      );
      
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–æ–∫–∞—Ü–∏—é: ${latitude}, ${longitude}`);
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}:`, error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // Handle confirmation button
  bot.hears('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', async (ctx) => {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!ctx.session) {
        ctx.session = {};
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –≤ —Å–µ—Å—Å–∏–∏
      if (!ctx.session.pendingLocation) {
        logger.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é, –Ω–æ –æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏`);
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.',
          Markup.keyboard([
            [{ text: 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', request_location: true }],
            ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
          ]).resize()
        );
        return;
      }

      const { latitude, longitude } = ctx.session.pendingLocation;
      
      // Process the confirmed location here
      // For example, find the nearest branch
      
      await ctx.reply(
        '–ú—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–π–¥–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Ñ–∏–ª–∏–∞–ª.',
        Markup.keyboard([
          ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
        ]).resize()
      );
      
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ª–æ–∫–∞—Ü–∏—é: ${latitude}, ${longitude}`);
      
      // Clear the pending location after confirmation
      ctx.session.pendingLocation = null;
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}:`, error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // Handle back button
  bot.hears('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', async (ctx) => {
    try {
      ctx.session.pendingLocation = null;
      
      // Return to main menu
      const mainMenuKeyboard = Markup.keyboard([
        ['üõç –ó–∞–∫–∞–∑–∞—Ç—å'],
        ['üö∂ –°–∞–º–æ–≤—ã–≤–æ–∑']
      ]).resize();

      await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', mainMenuKeyboard);
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}:`, error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
}; 