import { Markup } from 'telegraf';
import { fetchTerminals } from './terminals.js';

/**
 * Handles showing detailed information about a specific terminal
 */
export async function handleShowTerminalDetails(ctx) {
    try {
        await ctx.answerCbQuery();
        
        // First, ask for terminal ID
        const message = `üîç *–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —Ç–µ—Ä–º–∏–Ω–∞–ª–∞*\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ ID —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–º.`;
            
        // Create new message with a text input prompt
        await ctx.editMessageText(message, {
            parse_mode: 'Markdown',
            ...Markup.inlineKeyboard([
                [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'show_active_terminals')]
            ])
        });
        
        // Set flag in session to handle next message as terminal ID
        ctx.session = ctx.session || {};
        ctx.session.waitingForTerminalId = true;
    } catch (error) {
        console.error('Error in handleShowTerminalDetails:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–µ—Ç–∞–ª–µ–π —Ç–µ—Ä–º–∏–Ω–∞–ª–∞.');
    }
}

/**
 * Handles text input for terminal ID
 */
export async function handleTerminalIdInput(ctx, next) {
    // Check if we're waiting for terminal ID
    if (ctx.session?.waitingForTerminalId) {
        // Reset flag
        ctx.session.waitingForTerminalId = false;
        
        const terminalId = ctx.message.text.trim();
        
        // Check if input is a number
        if (!/^\d+$/.test(terminalId)) {
            await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).');
            return;
        }
        
        await showTerminalDetails(ctx, parseInt(terminalId, 10));
        return;
    }
    
    // Pass to next middleware if not handling terminal ID
    return next();
}

/**
 * Shows detailed information about a terminal
 */
async function showTerminalDetails(ctx, terminalId) {
    try {
        const terminals = await fetchTerminals();
        
        if (!terminals) {
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞—Ö.');
            return;
        }
        
        const terminal = terminals.find(t => t.id === terminalId);
        
        if (!terminal) {
            await ctx.reply(`‚ùå –¢–µ—Ä–º–∏–Ω–∞–ª —Å ID ${terminalId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            return;
        }
        
        // Format terminal details
        let details = `üè™ *–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ*\n\n`;
        details += `*ID*: ${terminal.id}\n`;
        details += `*–ù–∞–∑–≤–∞–Ω–∏–µ*: ${terminal.name || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n`;
        details += `*–ê–¥—Ä–µ—Å*: ${terminal.desc || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n`;
        details += `*–ì–æ—Ä–æ–¥ ID*: ${terminal.city_id || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n`;
        details += `*–°—Ç–∞—Ç—É—Å*: ${terminal.active ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n`;
        details += `*–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã*: ${terminal.latitude && terminal.longitude ? `${terminal.latitude}, ${terminal.longitude}` : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n`;
        details += `*–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏*: ${terminal.delivery_type === 'all' ? '–î–æ—Å—Ç–∞–≤–∫–∞ –∏ —Å–∞–º–æ–≤—ã–≤–æ–∑' : terminal.delivery_type === 'pickup' ? '–¢–æ–ª—å–∫–æ —Å–∞–º–æ–≤—ã–≤–æ–∑' : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n`;
        
        if (terminal.open_work && terminal.close_work) {
            details += `*–†–∞–±–æ—á–∏–µ —á–∞—Å—ã*: ${formatTime(terminal.open_work)} - ${formatTime(terminal.close_work)}\n`;
        }
        
        if (terminal.open_weekend && terminal.close_weekend) {
            details += `*–í—ã—Ö–æ–¥–Ω—ã–µ —á–∞—Å—ã*: ${formatTime(terminal.open_weekend)} - ${formatTime(terminal.close_weekend)}\n`;
        }
        
        if (terminal.delivery_distance) {
            details += `*–†–∞–¥–∏—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏*: ${terminal.delivery_distance / 1000} –∫–º\n`;
        }
        
        details += `*Telegram –≥—Ä—É–ø–ø–∞*: ${terminal.tg_group || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n`;
        details += `*–°–µ—Ä–≤–∏—Å—ã*: ${terminal.services || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\n`;
        
        // Payment methods
        details += `*–ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã*:\n`;
        details += `- Payme: ${terminal.payme_active ? '‚úÖ' : '‚ùå'}\n`;
        details += `- Click: ${terminal.click_active ? '‚úÖ' : '‚ùå'}\n`;
        details += `- MyUzcard: ${terminal.my_uzcard_active ? '‚úÖ' : '‚ùå'}\n`;
        
        // Add buttons
        const buttons = [];
        
        // Add location button if coordinates available
        if (terminal.latitude && terminal.longitude) {
            buttons.push([
                Markup.button.url(
                    'üìç –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ',
                    `https://maps.google.com/?q=${terminal.latitude},${terminal.longitude}`
                )
            ]);
        }
        
        buttons.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤', 'show_active_terminals')]);
        
        await ctx.reply(details, {
            parse_mode: 'Markdown',
            ...Markup.inlineKeyboard(buttons)
        });
    } catch (error) {
        console.error('Error showing terminal details:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ.');
    }
}

/**
 * Format ISO time string to readable format
 */
function formatTime(isoString) {
    try {
        const date = new Date(isoString);
        return `${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;
    } catch (error) {
        return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    }
} 