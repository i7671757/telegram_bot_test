import { Markup } from 'telegraf';
import logger from '../utils/logger.js';

/**
 * Gets the appropriate branch name based on language code
 * @param {Object} branch - Branch object
 * @param {string} languageCode - User's language preference
 * @returns {string} - Branch name in the appropriate language
 */
function getBranchName(branch, languageCode) {
    // console.log('Getting branch name for language:', languageCode);
    // console.log('Branch data:', branch);
    
    switch (languageCode) {
        case 'uz':
            return branch.name_uz || branch.name;
        case 'en':
            return branch.name_en || branch.name;
        default:
            return branch.name;
    }
}

export async function getBranchesKeyboard(ctx, cityId = null) {
    try {
        const response = await fetch('https://api.lesailes.uz/api/terminals');
        const data = await response.json();
        
        if (data.success) {
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª–∏–∞–ª—ã
            let branches = data.data.filter(terminal => terminal.active);
            
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω cityId, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–º—É
            if (cityId) {
                // –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ –∏—Ö ID
                const cityMapping = {
                    'tashkent': 2,
                    'samarkand': 3,
                    'bukhara': 4
                };
                const numericCityId = cityMapping[cityId];
                if (numericCityId) {
                    branches = branches.filter(branch => branch.city_id === numericCityId);
                }
            }

            // Get user's language preference
            const userLanguage = ctx.session?.languageCode || 'ru';
            console.log('User language in getBranchesKeyboard:', userLanguage);
            
            // Create keyboard
            const keyboard = [];
            for (let i = 0; i < branches.length; i += 2) {
                const row = [];
                const branchName1 = getBranchName(branches[i], userLanguage);
                row.push({ text: branchName1 });
                
                if (i + 1 < branches.length) {
                    const branchName2 = getBranchName(branches[i + 1], userLanguage);
                    row.push({ text: branchName2 });
                }
                
                keyboard.push(row);
            }
            
            return keyboard;
        }
        return null;
    } catch (error) {
        console.error('Error fetching branches:', error);
        return null;
    }
}

export async function handleBranchSelection(ctx) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        const cityId = ctx.session?.selectedCity || null;
        
        // Get user's language preference
        const userLanguage = ctx.session?.languageCode || 'uz';
        console.log('User language in handleBranchSelection:', userLanguage);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª–∏–∞–ª—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –≥–æ—Ä–æ–¥—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        const keyboard = await getBranchesKeyboard(ctx, cityId);
        
        if (keyboard && keyboard.length > 0) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.push([{ text: ctx.i18n.t('menu.back') }]);
            
            await ctx.reply(ctx.i18n.t('select_branch'), {
                reply_markup: {
                    keyboard: keyboard,
                    resize_keyboard: true
                }
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            const previousAction = ctx.session?.lastAction;
            
            ctx.session = {
                ...ctx.session,
                previousAction: previousAction,
                lastAction: 'branches_list_shown',
                lastActionTime: new Date().toISOString(),
                languageCode: userLanguage // –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ —Å–µ—Å—Å–∏–∏
            };
        } else {
            await ctx.reply(ctx.i18n.t('error.branches_load_failed'));
        }
    } catch (error) {
        console.error('Error displaying branches:', error);
        await ctx.reply(ctx.i18n.t('error.branches_load_failed'));
    }
}

// Function to fetch categories from API
export async function getCategories() {
    try {
        const response = await fetch('https://api.lesailes.uz/api/categories/root');
        const data = await response.json();
        
        if (data.success) {
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            return data.data.filter(category => category.active);
        }
        return null;
    } catch (error) {
        console.error('Error fetching categories:', error);
        return null;
    }
}

// Function to create categories keyboard
export function createCategoriesKeyboard(categories) {
    const keyboard = [];
    
    // Group categories by 2 in a row
    for (let i = 0; i < categories.length; i += 2) {
        const row = [];
        const emoji = categories[i].icon || 'üçΩÔ∏è';
        row.push({ text: `${emoji} ${categories[i].attribute_data.name.chopar.ru}` });
        
        if (i + 1 < categories.length) {
            const nextEmoji = categories[i + 1].icon || 'üçΩÔ∏è';
            row.push({ text: `${nextEmoji} ${categories[i + 1].attribute_data.name.chopar.ru}` });
        }
        
        keyboard.push(row);
    }
    
    // Add back and cart buttons
    keyboard.push([
        { text: 'üõí –ö–æ—Ä–∑–∏–Ω–∞' },
        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }
    ]);
    
    return keyboard;
}

export async function handleBranchCallback(ctx) {
    const branchId = ctx.callbackQuery.data.replace('select_branch_', '');
    try {
        const response = await fetch('https://api.lesailes.uz/api/terminals');
        const data = await response.json();
        
        if (data.success) {
            const branch = data.data.find(t => t.id.toString() === branchId);
            if (branch) {
                // Get user's language preference
                const userLanguage = ctx.session?.languageCode || 'uz';
                console.log('User language:', userLanguage);
                console.log('Branch data:', branch);
                
                // Get localized branch name and description
                const branchName = getBranchName(branch, userLanguage);
                const branchDesc = userLanguage === 'uz' ? branch.desc_uz : 
                                 userLanguage === 'en' ? branch.desc_en : 
                                 branch.desc;
                
                console.log('Localized branch name:', branchName);
                console.log('Localized branch description:', branchDesc);
                
                // Get localized delivery type text
                const deliveryText = {
                    ru: {
                        all: 'üöó –î–æ—Å—Ç—É–ø–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞',
                        pickup: 'üèÉ –¢–æ–ª—å–∫–æ —Å–∞–º–æ–≤—ã–≤–æ–∑'
                    },
                    uz: {
                        all: 'üöó Yetkazib berish mavjud',
                        pickup: 'üèÉ Faqat o\'z-o\'zidan olish'
                    },
                    en: {
                        all: 'üöó Delivery available',
                        pickup: 'üèÉ Pickup only'
                    }
                };
                
                let message = `${branchName}\n`;
                if (branchDesc) message += `${branchDesc}\n`;
                if (branch.delivery_type === 'all') {
                    message += `${deliveryText[userLanguage].all}\n`;
                } else if (branch.delivery_type === 'pickup') {
                    message += `${deliveryText[userLanguage].pickup}\n`;
                }
                
                console.log('Final message branches.js:', message);
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∏–ª–∏–∞–ª–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º location
                const branchWithLocation = {
                    ...branch,
                    location: {
                        lat: branch.latitude || "",
                        lon: branch.longitude || ""
                    }
                };
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∏–ª–∏–∞–ª–µ
                ctx.session = {
                    ...ctx.session,
                    selectedBranch: branchWithLocation,
                    lastAction: 'branch_selected',
                    lastActionTime: new Date().toISOString()
                };

                // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∏–ª–∏–∞–ª–µ
                await ctx.reply(message);
                
                // –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª–∏–∞–ª–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                await ctx.reply(ctx.i18n.t('menu_categories.title'), {
                    parse_mode: 'HTML',
                    reply_markup: {
                        keyboard: [
                            [
                                { text: ctx.i18n.t('menu_categories.back') },
                                { text: ctx.i18n.t('menu_categories.basket') }
                            ],
                            [{ text: ctx.i18n.t('menu_categories.sets') }],
                            [{ text: ctx.i18n.t('menu_categories.snacks') }],
                            [{ text: ctx.i18n.t('menu_categories.burgers') }],
                            [{ text: ctx.i18n.t('menu_categories.chicken') }]
                            
                        ],
                        resize_keyboard: true
                    }
                });
            }
        }
    } catch (error) {
        console.error('Error handling branch selection:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª–∏–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
function getCategoryName(category, language) {
    if (!category.attribute_data?.name?.chopar) {
        return 'Unknown';
    }
    
    switch (language) {
        case 'uz':
            return category.attribute_data.name.chopar.uz || category.attribute_data.name.chopar.ru;
        case 'en':
            return category.attribute_data.name.chopar.en || category.attribute_data.name.chopar.ru;
        default:
            return category.attribute_data.name.chopar.ru;
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
function getLocalizedText(key, language) {
    const texts = {
        back: {
            ru: '–ù–∞–∑–∞–¥',
            uz: 'Ortga',
            en: 'Back'
        },
        cart: {
            ru: '–ö–æ—Ä–∑–∏–Ω–∞',
            uz: 'Savat',
            en: 'Cart'
        },
        select_category: {
            ru: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
            uz: 'Kategoriyani tanlang:',
            en: 'Select category:'
        },
        categories_load_error: {
            ru: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            uz: 'Kechirasiz, kategoriyalarni yuklab bolmadi. Keyinroq qayta urinib koring.',
            en: 'Sorry, failed to load categories. Please try again later.'
        },
        branch_selection_error: {
            ru: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª–∏–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            uz: 'Filial tanlashda xatolik yuz berdi. Keyinroq qayta urinib koring.',
            en: 'An error occurred while selecting the branch. Please try again later.'
        }
    };
    
    return texts[key]?.[language] || texts[key]?.ru || texts[key]?.en || key;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
export async function handleProceedToOrder(ctx) {
    try {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ñ–∏–ª–∏–∞–ª–∞
        await ctx.deleteMessage();
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await ctx.reply(ctx.i18n.t('menu_categories.title'), {
            parse_mode: 'HTML',
            reply_markup: {
                keyboard: [
                    [{ text: ctx.i18n.t('menu_categories.sets') }],
                    [{ text: ctx.i18n.t('menu_categories.snacks') }],
                    [{ text: ctx.i18n.t('menu_categories.burgers') }],
                    [{ text: ctx.i18n.t('menu_categories.chicken') }],
                    [
                        { text: ctx.i18n.t('menu_categories.back') },
                        { text: ctx.i18n.t('menu_categories.basket') }
                    ]
                ],
                resize_keyboard: true
            }
        });
    } catch (error) {
        console.error('Error proceeding to order:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –∑–∞–∫–∞–∑—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

export async function handleCategorySelection(ctx) {
    try {
        const categories = await getCategories();
        
        if (categories && categories.length > 0) {
            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ)
            const keyboard = [];
            
            for (let i = 0; i < categories.length; i += 2) {
                const row = [];
                row.push({ text: categories[i].attribute_data.name.chopar.ru });
                
                if (i + 1 < categories.length) {
                    row.push({ text: categories[i + 1].attribute_data.name.chopar.ru });
                }
                
                keyboard.push(row);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.push([{ text: ctx.i18n.t('menu.back') }]);
            
            await ctx.reply(ctx.i18n.t('select_category'), {
                reply_markup: {
                    keyboard: keyboard,
                    resize_keyboard: true
                }
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const previousAction = ctx.session?.lastAction;
            
            ctx.session = {
                ...ctx.session,
                availableCategories: categories,
                previousAction: previousAction,
                lastAction: 'categories_list_shown',
                lastActionTime: new Date().toISOString()
            };
        } else {
            await ctx.reply(ctx.i18n.t('error.categories_load_failed'));
        }
    } catch (error) {
        console.error('Error displaying categories:', error);
        await ctx.reply(ctx.i18n.t('error.categories_load_failed'));
    }
} 