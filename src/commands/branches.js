import { Markup } from 'telegraf';

export async function getBranchesKeyboard(cityId = null) {
    try {
        const response = await fetch('https://api.lesailes.uz/api/terminals');
        const data = await response.json();
        
        if (data.success) {
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª–∏–∞–ª—ã
            let branches = data.data.filter(terminal => terminal.active && terminal.name);
            
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω cityId, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–º—É
            if (cityId) {
                branches = branches.filter(branch => branch.city_id === cityId);
            }
            
            return branches;
        }
        return null;
    } catch (error) {
        console.error('Error fetching branches:', error);
        return null;
    }
}

export async function handleBranchSelection(ctx) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º ID –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const cityId = ctx.session?.selectedCityId ? parseInt(ctx.session.selectedCityId) : null;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª–∏–∞–ª—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –≥–æ—Ä–æ–¥—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        const branches = await getBranchesKeyboard(cityId);
        
        if (branches && branches.length > 0) {
            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤ (–ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ)
            const keyboard = [];
            
            for (let i = 0; i < branches.length; i += 2) {
                const row = [];
                row.push({ text: `üè™ ${branches[i].name}` });
                
                if (i + 1 < branches.length) {
                    row.push({ text: `üè™ ${branches[i + 1].name}` });
                }
                
                keyboard.push(row);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.push([{ text: ctx.i18n.t('menu.back') }]);
            
            await ctx.reply(ctx.i18n.t('select_branch'), {
                reply_markup: {
                    keyboard: keyboard,
                    resize_keyboard: true
                }
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–ª–∏–∞–ª–∞—Ö –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const previousAction = ctx.session?.lastAction;
            
            ctx.updateSession({
                availableBranches: branches,
                previousAction: previousAction,
                lastAction: 'branches_list_shown',
                lastActionTime: new Date().toISOString()
            });
        } else {
            await ctx.reply(ctx.i18n.t('error.branches_load_failed'));
        }
    } catch (error) {
        console.error('Error displaying branches:', error);
        await ctx.reply(ctx.i18n.t('error.branches_load_failed'));
    }
}

// Function to fetch categories from API
export async function getCategories() {
    try {
        const response = await fetch('https://api.lesailes.uz/api/categories/root');
        const data = await response.json();
        
        if (data.success) {
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            return data.data.filter(category => category.active);
        }
        return null;
    } catch (error) {
        console.error('Error fetching categories:', error);
        return null;
    }
}

// Function to create categories keyboard
export function createCategoriesKeyboard(categories) {
    const keyboard = [];
    
    // Group categories by 2 in a row
    for (let i = 0; i < categories.length; i += 2) {
        const row = [];
        const emoji = categories[i].icon || 'üçΩÔ∏è';
        row.push({ text: `${emoji} ${categories[i].attribute_data.name.chopar.ru}` });
        
        if (i + 1 < categories.length) {
            const nextEmoji = categories[i + 1].icon || 'üçΩÔ∏è';
            row.push({ text: `${nextEmoji} ${categories[i + 1].attribute_data.name.chopar.ru}` });
        }
        
        keyboard.push(row);
    }
    
    // Add back and cart buttons
    keyboard.push([
        { text: 'üõí –ö–æ—Ä–∑–∏–Ω–∞' },
        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }
    ]);
    
    return keyboard;
}

export async function handleBranchCallback(ctx) {
    const branchId = ctx.callbackQuery.data.replace('select_branch_', '');
    try {
        const response = await fetch('https://api.lesailes.uz/api/terminals');
        const data = await response.json();
        
        if (data.success) {
            const branch = data.data.find(t => t.id.toString() === branchId);
            if (branch) {
                let message = `üè™ ${branch.name}\n`;
                if (branch.desc) message += `üìç ${branch.desc}\n`;
                if (branch.delivery_type === 'all') {
                    message += 'üöó –î–æ—Å—Ç—É–ø–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞\n';
                } else if (branch.delivery_type === 'pickup') {
                    message += 'üèÉ –¢–æ–ª—å–∫–æ —Å–∞–º–æ–≤—ã–≤–æ–∑\n';
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª–∏–∞–ª –≤ —Å–µ—Å—Å–∏–∏
                ctx.updateSession({
                    selectedBranch: branch.id,
                    selectedBranchName: branch.name,
                    branchLatitude: branch.latitude,
                    branchLongitude: branch.longitude,
                    lastAction: 'branch_selected',
                    lastActionTime: new Date().toISOString()
                });

                // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∏–ª–∏–∞–ª–µ
                await ctx.reply(message);

                // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                const categories = await getCategories();
                if (categories && categories.length > 0) {
                    const keyboard = [];
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    for (let i = 0; i < categories.length; i += 2) {
                        const row = [];
                        const emoji = categories[i].icon || 'üçΩÔ∏è'; // –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ API –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
                        row.push({ text: `${emoji} ${categories[i].attribute_data.name.chopar.ru}` });
                        
                        if (i + 1 < categories.length) {
                            const nextEmoji = categories[i + 1].icon || 'üçΩÔ∏è';
                            row.push({ text: `${nextEmoji} ${categories[i + 1].attribute_data.name.chopar.ru}` });
                        }
                        
                        keyboard.push(row);
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –∏ –Ω–∞–∑–∞–¥
                    keyboard.push([
                        { text: 'üõí –ö–æ—Ä–∑–∏–Ω–∞' },
                        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }
                    ]);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
                        reply_markup: {
                            keyboard: keyboard,
                            resize_keyboard: true
                        }
                    });

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                    ctx.updateSession({
                        availableCategories: categories,
                        lastAction: 'categories_shown'
                    });
                } else {
                    await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                }
            }
        }
    } catch (error) {
        console.error('Error handling branch selection:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª–∏–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
export async function handleProceedToOrder(ctx) {
    try {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ñ–∏–ª–∏–∞–ª–∞
        await ctx.deleteMessage();
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await ctx.reply(ctx.i18n.t('menu_categories.title'), {
            parse_mode: 'HTML',
            reply_markup: {
                keyboard: [
                    [{ text: ctx.i18n.t('menu_categories.sets') }],
                    [{ text: ctx.i18n.t('menu_categories.snacks') }],
                    [{ text: ctx.i18n.t('menu_categories.burgers') }],
                    [{ text: ctx.i18n.t('menu_categories.chicken') }],
                    [
                        { text: ctx.i18n.t('menu_categories.back') },
                        { text: ctx.i18n.t('menu_categories.basket') }
                    ]
                ],
                resize_keyboard: true
            }
        });
    } catch (error) {
        console.error('Error proceeding to order:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –∑–∞–∫–∞–∑—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

export async function handleCategorySelection(ctx) {
    try {
        const categories = await getCategories();
        
        if (categories && categories.length > 0) {
            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ)
            const keyboard = [];
            
            for (let i = 0; i < categories.length; i += 2) {
                const row = [];
                row.push({ text: categories[i].attribute_data.name.chopar.ru });
                
                if (i + 1 < categories.length) {
                    row.push({ text: categories[i + 1].attribute_data.name.chopar.ru });
                }
                
                keyboard.push(row);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.push([{ text: ctx.i18n.t('menu.back') }]);
            
            await ctx.reply(ctx.i18n.t('select_category'), {
                reply_markup: {
                    keyboard: keyboard,
                    resize_keyboard: true
                }
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const previousAction = ctx.session?.lastAction;
            
            ctx.updateSession({
                availableCategories: categories,
                previousAction: previousAction,
                lastAction: 'categories_list_shown',
                lastActionTime: new Date().toISOString()
            });
        } else {
            await ctx.reply(ctx.i18n.t('error.categories_load_failed'));
        }
    } catch (error) {
        console.error('Error displaying categories:', error);
        await ctx.reply(ctx.i18n.t('error.categories_load_failed'));
    }
} 