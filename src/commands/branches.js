import { Markup } from 'telegraf';

export async function getBranchesKeyboard() {
    try {
        const response = await fetch('https://api.lesailes.uz/api/terminals');
        const data = await response.json();
        
        if (data.success) {
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª–∏–∞–ª—ã –∏ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            const buttons = data.data
                .filter(terminal => terminal.active && terminal.name)
                .map(terminal => [Markup.button.callback(
                    terminal.name, 
                    `select_branch_${terminal.id}`
                )]);

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∫–æ–Ω–µ—Ü
            buttons.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_menu')]);

            return Markup.inlineKeyboard(buttons);
        }
        return null;
    } catch (error) {
        console.error('Error fetching branches:', error);
        return null;
    }
}

export async function handleBranchSelection(ctx) {
    const keyboard = await getBranchesKeyboard();
    if (keyboard) {
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª Les Ailes:', keyboard);
    } else {
        await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

export async function handleBranchCallback(ctx) {
    const branchId = ctx.callbackQuery.data.replace('select_branch_', '');
    try {
        const response = await fetch('https://api.lesailes.uz/api/terminals');
        const data = await response.json();
        
        if (data.success) {
            const branch = data.data.find(t => t.id.toString() === branchId);
            if (branch) {
                let message = `üè™ ${branch.name}\n`;
                if (branch.desc) message += `üìç ${branch.desc}\n`;
                if (branch.delivery_type === 'all') {
                    message += 'üöó –î–æ—Å—Ç—É–ø–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞\n';
                } else if (branch.delivery_type === 'pickup') {
                    message += 'üèÉ –¢–æ–ª—å–∫–æ —Å–∞–º–æ–≤—ã–≤–æ–∑\n';
                }
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –ª–æ–∫–∞—Ü–∏–µ–π
                const buttons = [];
                if (branch.latitude && branch.longitude) {
                    buttons.push([
                        Markup.button.url(
                            'üìç –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ',
                            `https://maps.google.com/?q=${branch.latitude},${branch.longitude}`
                        )
                    ]);
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª–∏–∞–ª –≤ —Å–µ—Å—Å–∏–∏
                ctx.updateSession({
                    selectedBranch: branch.id,
                    selectedBranchName: branch.name,
                    branchLatitude: branch.latitude,
                    branchLongitude: branch.longitude,
                    lastAction: 'branch_selected',
                    lastActionTime: new Date().toISOString()
                });
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞ –∏–∑ –º–µ–Ω—é —Å–∞–º–æ–≤—ã–≤–æ–∑–∞
                if (ctx.session.lastAction === 'select_branch_pickup') {
                    buttons.push([Markup.button.callback(ctx.i18n.t('self_pickup.confirm_order'), 'proceed_to_order')]);
                }
                
                buttons.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª–∏–∞–ª–∞–º', 'show_branches')]);
                
                await ctx.editMessageText(message, Markup.inlineKeyboard(buttons));
            }
        }
    } catch (error) {
        console.error('Error handling branch selection:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª–∏–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
export async function handleProceedToOrder(ctx) {
    try {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ñ–∏–ª–∏–∞–ª–∞
        await ctx.deleteMessage();
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await ctx.reply(ctx.i18n.t('menu_categories.title'), {
            parse_mode: 'HTML',
            reply_markup: {
                keyboard: [
                    [{ text: ctx.i18n.t('menu_categories.sets') }],
                    [{ text: ctx.i18n.t('menu_categories.snacks') }],
                    [{ text: ctx.i18n.t('menu_categories.burgers') }],
                    [{ text: ctx.i18n.t('menu_categories.chicken') }],
                    [
                        { text: ctx.i18n.t('menu_categories.back') },
                        { text: ctx.i18n.t('menu_categories.basket') }
                    ]
                ],
                resize_keyboard: true
            }
        });
    } catch (error) {
        console.error('Error proceeding to order:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –∑–∞–∫–∞–∑—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
} 